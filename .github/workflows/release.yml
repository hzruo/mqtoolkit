name: Build and Release

on:
  push:
    tags:
      - 'v*'  # 触发条件：推送以 v 开头的标签，如 v1.0.0
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

permissions:
  contents: write

jobs:
  build:
    strategy:
      fail-fast: false  # 不要因为一个平台失败就取消其他平台
      matrix:
        platform:
          - os: windows-latest
            target: windows/amd64
            name: Windows-x64
          - os: macos-13
            target: darwin/amd64
            name: macOS-Intel
          - os: macos-latest
            target: darwin/arm64
            name: macOS-Apple-Silicon
          - os: ubuntu-22.04
            target: linux/amd64
            name: Linux-x64

    runs-on: ${{ matrix.platform.os }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Wails
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Install Linux dependencies
        if: matrix.platform.os == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libgtk-3-dev libwebkit2gtk-4.0-dev librsvg2-bin

      - name: Install macOS dependencies
        if: contains(matrix.platform.os, 'macos')
        run: |
          brew install librsvg

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Extract version from tag
        id: version
        run: |
          if ("${{ github.event_name }}" -eq "workflow_dispatch") {
            $VERSION = "${{ github.event.inputs.version }}"
            $VERSION = $VERSION -replace "^v", ""
          } else {
            $VERSION = "${{ github.ref }}" -replace "refs/tags/v", ""
          }
          echo "VERSION=$VERSION" >> $env:GITHUB_OUTPUT
          echo "Extracted version: $VERSION"
        shell: pwsh

      - name: Update wails.json version (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $VERSION = "${{ steps.version.outputs.VERSION }}"
          Write-Host "Updating wails.json version to $VERSION"

          $content = Get-Content wails.json -Raw
          $currentVersion = ($content | Select-String '"productVersion": "([^"]*)"').Matches[0].Groups[1].Value
          Write-Host "Current version in wails.json: $currentVersion"

          if ($currentVersion -ne $VERSION) {
            Write-Host "Updating version from $currentVersion to $VERSION"
            $content = $content -replace '"productVersion": "[^"]*"', "`"productVersion`": `"$VERSION`""
            $content | Set-Content wails.json -NoNewline
            Write-Host "Version updated successfully"
          } else {
            Write-Host "Version already matches, no update needed"
          }

          $newContent = Get-Content wails.json -Raw
          $newVersion = ($newContent | Select-String '"productVersion": "([^"]*)"').Matches[0].Groups[1].Value
          Write-Host "Final version in wails.json: $newVersion"

      - name: Update wails.json version (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          echo "Updating wails.json version to $VERSION"

          CURRENT_VERSION=$(grep -o '"productVersion": "[^"]*"' wails.json | cut -d'"' -f4)
          echo "Current version in wails.json: $CURRENT_VERSION"

          if [ "$CURRENT_VERSION" != "$VERSION" ]; then
            echo "Updating version from $CURRENT_VERSION to $VERSION"
            if [[ "$RUNNER_OS" == "macOS" ]]; then
              sed -i '' "s/\"productVersion\": \"[^\"]*\"/\"productVersion\": \"$VERSION\"/" wails.json
            else
              sed -i "s/\"productVersion\": \"[^\"]*\"/\"productVersion\": \"$VERSION\"/" wails.json
            fi
            echo "Version updated successfully"
          else
            echo "Version already matches, no update needed"
          fi

          NEW_VERSION=$(grep -o '"productVersion": "[^"]*"' wails.json | cut -d'"' -f4)
          echo "Final version in wails.json: $NEW_VERSION"

      - name: Generate icons
        run: |
          chmod +x scripts/generate-icons.sh
          ./scripts/generate-icons.sh

      - name: Build application
        run: |
          wails build -platform ${{ matrix.platform.target }}

      - name: Fix macOS app (macOS only)
        if: contains(matrix.platform.os, 'macos')
        shell: bash
        run: |
          find build/bin -name "*.app" -exec xattr -cr {} \;
          find build/bin -name "*.app" -exec codesign --force --deep --sign - {} \;

      - name: Create archive (Windows)
        if: matrix.platform.os == 'windows-latest'
        shell: pwsh
        run: |
          cd build/bin
          Compress-Archive -Path * -DestinationPath ../../MQToolkit-${{ matrix.platform.name }}.zip

      - name: Create archive (Linux)
        if: matrix.platform.os == 'ubuntu-22.04'
        shell: bash
        run: |
          cd build/bin
          tar -czf ../../MQToolkit-${{ matrix.platform.name }}.tar.gz *

      - name: Create archive (macOS)
        if: contains(matrix.platform.os, 'macos')
        shell: bash
        run: |
          cd build/bin
          zip -r ../../MQToolkit-${{ matrix.platform.name }}.zip *.app

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: MQToolkit-${{ matrix.platform.name }}
          path: |
            MQToolkit-${{ matrix.platform.name }}.*

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: List downloaded files
        run: |
          echo "Downloaded artifacts:"
          find dist -type f -name "*" | sort
          echo ""
          echo "File details:"
          find dist -type f -name "*" -exec ls -la {} \;

      - name: Extract version from tag
        id: version
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          name: MQ Toolkit ${{ steps.version.outputs.VERSION }}
          body: |
            ## MQ Toolkit ${{ steps.version.outputs.VERSION }}
            
            ### 📦 下载
            
            选择适合您系统的版本：
            
            - **Windows**: `MQToolkit-Windows-x64.zip`
            - **macOS (Intel)**: `MQToolkit-macOS-Intel.zip`
            - **macOS (Apple Silicon)**: `MQToolkit-macOS-Apple-Silicon.zip`
            - **Linux**: `MQToolkit-Linux-x64.tar.gz`
            
            ### 🚀 功能特性
            
            - 支持 Kafka、RabbitMQ、RocketMQ
            - 消息生产与消费
            - 主题/队列管理
            - 消息模板管理
            - 操作历史记录
            - 实时日志查看
            
            ### 📝 使用说明
            
            1. 下载对应平台的压缩包
            2. 解压到任意目录
            3. 运行可执行文件
            
            **macOS 用户注意**: 首次运行可能需要在系统偏好设置中允许运行，或右键点击应用选择"打开"。
            
            ### 🔗 相关链接
            
            - [项目主页](https://github.com/hzruo/MQToolkit)
            - [使用文档](https://github.com/hzruo/MQToolkit/blob/main/README.md)
            - [问题反馈](https://github.com/hzruo/MQToolkit/issues)
          files: |
            dist/**/*
          draft: false
          prerelease: false
